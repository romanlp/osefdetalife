/* You can add global styles to this file, and also import other style files */
@use '@angular/material' as mat;
@use "sass:math";
@import url('https://fonts.googleapis.com/css?family=Krub');

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --color-bg-dark: #15171b;
  --color-bg-light: #e8e8e8;

  --color-dark: #ffffff;
  --color-light: #000000;

  --color-item-light: #f1f1f1;

  --bg-color: var(--color-bg-light);
  --color: var(--color-light);
}

// Imports for Angular Material Theming
@include mat.all-component-typographies();
@include mat.core();

// Define a light theme
$light-primary: mat.define-palette(mat.$indigo-palette);
$light-accent: mat.define-palette(mat.$pink-palette);
$light-theme: mat.define-light-theme((
 color: (
   primary: $light-primary,
   accent: $light-accent,
 )
));

// Define a dark theme
$dark-primary: mat.define-palette(mat.$pink-palette);
$dark-accent: mat.define-palette(mat.$blue-gray-palette);
$dark-theme: mat.define-dark-theme((
 color: (
   primary: $dark-primary,
   accent: $dark-accent,
 )
));

@include mat.all-component-themes($light-theme);

.dark-theme {
  @include mat.all-component-colors($dark-theme);

  --bg-color: var(--color-bg-dark);
  --color: var(--color-dark);
}


body {
  background-color: var(--bg-color);
  margin: 0;
  font-family: 'Krub', sans-serif;
  color: var(--color);
}

.background {
  position: absolute;
  width: 100vw;
  height: 100vh;
  background: #1e0f33;
  overflow: hidden;
}

$particleSize: 30vmin;
$animationDuration: 60s;
$amount: 10;
.background span {
  width: $particleSize;
  height: $particleSize;
  border-radius: $particleSize;
  backface-visibility: hidden;
  position: absolute;
  animation-name: move;
  animation-duration: $animationDuration;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  $colors: ( #362554, #7a3149, #805555);
  @for $i from 1 through $amount {
      &:nth-child(#{$i}) {
          color: nth($colors, random(length($colors)));
          top: random(100) * 1%;
          left: random(100) * 1%;
          animation-duration: math.div(random($animationDuration * 10), 10) * 1s + 10s;
          animation-delay: math.div(random(($animationDuration + 10s) * 10), 10) * -1s;
          transform-origin: (random(50) - 25) * 1vw (random(50) - 25) * 1vh;
          $blurRadius: (random() + 0.5) * $particleSize * 0.5;
          $x: if(random() > 0.5, -1, 1);
          box-shadow: ($particleSize * 2 * $x) 0 $blurRadius currentColor;
      }
  }
}

@keyframes move {
  100% {
      transform: translate3d(0, 0, 1px) rotate(360deg);
  }
}
